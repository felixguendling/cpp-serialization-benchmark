name: Unix Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  formatting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install clang-format
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends clang-format-12
      - name: Format files
        run: find src include -type f -not -name catch.hpp -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-12 -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: MacOS Release
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
          - name: GCC 11 Release
            cxx: g++-11
            cc: gcc-11
            mode: Release
            os: ubuntu-20.04
          - name: GCC 11 Release
            cxx: g++-11
            cc: gcc-11
            mode: Release
            os: ubuntu-20.04
          - name: GCC 11 Debug
            cxx: g++-11
            cc: gcc-11
            mode: Debug
            os: ubuntu-20.04
          - name: Clang 12 Release
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
          - name: Clang Tidy
            cxx: clang++-12
            cc: clang-12
            mode: Debug
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            lint: true
            os: ubuntu-20.04
          - key: Clang 12 Sanitizer
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cflags: -fsanitize=address,undefined -fno-omit-frame-pointer
            cxxflags: -fsanitize=address,undefined -fno-omit-frame-pointer -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
    env:
      DEBIAN_FRONTEND: noninteractive
      UBSAN_OPTIONS: halt_on_error=1:abort_on_error=1
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: seanmiddleditch/gha-setup-ninja@master
        if: matrix.config.os == 'macos-latest'

      # ==== INSTALL ====
      - name: Update APT
        if: matrix.config.os != 'macos-latest'
        run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update

      - name: Install LLVM
        if: matrix.config.os != 'macos-latest' && matrix.config.cc == 'clang-12'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends libc++-12-dev libc++abi-12-dev clang-tidy-12 libunwind-12-dev llvm-12
      - name: Install Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-11'
        run: sudo apt-get install -y --no-install-recommends valgrind

      - name: Install Ninja
        if: matrix.config.os != 'macos-latest'
        run: sudo apt-get install -y --no-install-recommends ninja-build g++-11

      # ==== BUILD ====
      - name: CMake
        run: |
          cmake \
            -G Ninja -S . -B build \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cxxflags }}" \
            -DCMAKE_CXX_FLAGS_DEBUG="" \
            -DCMAKE_CXX_LINKER_FLAGS=${{ matrix.config.ldflags }}" \
            -DCMAKE_CXX_EXE_LINKER_FLAGS="${{ matrix.config.ldflags }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.mode }} \
            -UTL_LINT=${{ matrix.config.lint }}
      - name: Build
        run: |
          cmake --build build --target cpp-serialization-benchmark

      # ==== TESTS ====
      - name: Run Tests
        run: ./build/cpp-serialization-benchmark

      # ==== VALGRIND ====
      - name: Run Tests Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-11'
        run: valgrind --error-exitcode=1 --show-reachable=yes --leak-check=full ./build/cpp-serialization-benchmark
